trigger:
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'azureconnection'
  devFunctionAppName: 'athemailnotification'
  preProdFunctionAppName: 'athemailnotification'
  prodFunctionAppName: 'athemailnotification'
  packagePath: '$(System.DefaultWorkingDirectory)/drop'
  buildId: $(Build.BuildId)

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true

    - script: |
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: DeployToDev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: Deploy
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'drop'
              path: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'functionAppLinux'
              appName: $(devFunctionAppName)
              package: '$(System.ArtifactsDirectory)/$(Build.BuildId).zip'

- stage: DeployToPreProd
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    environment: 'PreProduction'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'drop'
              path: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'functionAppLinux'
              appName: $(preProdFunctionAppName)
              package: '$(System.ArtifactsDirectory)/$(Build.BuildId).zip'

- stage: DeployToProd
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'drop'
              path: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'functionAppLinux'
              appName: $(prodFunctionAppName)
              package: '$(System.ArtifactsDirectory)/$(Build.BuildId).zip'